name: Deploy Templatized Data Environment

on:
  pull_request:
    types: [closed]
    branches:
      - staging
      - main
  push:
    branches:
      - staging
      - main

jobs:
  deploy_data_environment:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest

    env:
      SNOWFLAKE_CONNECTIONS_ADVANCED_DATA_ENGINEERING_SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
      SNOWFLAKE_CONNECTIONS_ADVANCED_DATA_ENGINEERING_SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
      SNOWFLAKE_CONNECTIONS_ADVANCED_DATA_ENGINEERING_SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set environment
        id: set_env
        run: |
          TARGET_BRANCH="${GITHUB_BASE_REF:-${GITHUB_REF#refs/heads/}}"
          if [[ $TARGET_BRANCH == "staging" ]]; then
            echo "DEPLOY_ENV=staging" >> $GITHUB_ENV
          elif [[ $TARGET_BRANCH == "main" ]]; then
            echo "DEPLOY_ENV=prod" >> $GITHUB_ENV
          else
            echo "Unexpected branch: $TARGET_BRANCH"
            exit 1
          fi

      - name: Install SnowflakeCLI
        uses: snowflakedb/snowflake-cli-action@v1.5
        with:
          cli-version: "latest"
          default-config-file-path: "config.toml"

      - name: Fetch latest changes to Snowflake
        run: snow git fetch course_repo.public.advanced_data_engineering_snowflake

      - name: Deploy only changed SQL scripts (with function dependencies)
        run: |
          if [ -n "${{ github.event.before }}" ]; then
            RANGE="${{ github.event.before }}..${{ github.sha }}"
          else
            RANGE="HEAD~1..HEAD"
          fi
          CHANGED_FILES=$(git diff --name-only $RANGE | grep '\.sql$' | grep '^module-1/' || true)
          if [ -z "$CHANGED_FILES" ]; then
            echo "No SQL files changed. Skipping deployment."
            exit 0
          fi
          for file in $CHANGED_FILES; do
            echo "Deploying changed SQL: $file"
            # If deploying a view, make sure all functions are deployed first
            if [[ $file == *"/objects/views/"* ]]; then
              project_dir=$(echo "$file" | cut -d'/' -f1-2)
              for func in $project_dir/pipeline/objects/functions/*.sql; do
                echo "Deploying function dependency: $func"
                snow git execute @course_repo.public.advanced_data_engineering_snowflake/branches/main/$func \
                  -D "env='${{ env.DEPLOY_ENV }}'" \
                  --database=COURSE_REPO \
                  --schema=PUBLIC
              done
            fi
            snow git execute @course_repo.public.advanced_data_engineering_snowflake/branches/main/$file \
              -D "env='${{ env.DEPLOY_ENV }}'" \
              --database=COURSE_REPO \
              --schema=PUBLIC
          done
